CloudFormation vs. Terraform

Both Terraform and CloudFormation are pretty good when it comes to infrastructure coding. Both are template based-tools used to declaratively define and build infrastructure resources. The most important decision is to use an IaC/IaaC tool than which tool to use.
CloudFormation is AWS-specific and can be used to provision just about any type of AWS service. Using CloudFormation, you can spin up new EC2 instances, load balancers, S3 buckets, RDS databases and more
Terraform is developed by the Hashicorp team and is a cloud-agnostic tool which enables the provisioning of hybrid-cloud infrastructures with a single tool. For example, maybe you want to use CloudFlare DNS along with an AWS infrastructure — Terraform will allow you to provision both in the same template with the same tool.
Terraform keeps its state in a file. This file can be stored on disk, committed to source control (not recommended), or kept in S3 or some configuration management system. Whatever you choose, you must make sure that you don’t lose or corrupt your state file
As Terraform is cloud-agnostic, you can compose your infrastructure from different cloud providers, along with resources from third-party services, such as PagerDuty or New Relic. Terraform gives you a convenient way to manage all your infrastructure as code, without having to learn separate tools
Cross Platform
Terraform’s major benefit is that you can use it with many cloud providers: you just need to learn one language (hcl) and workflow and use it with AWS, Azure, GCP etc. This is a real benefit for developers like me who do both AWS and Azure 
Workflow
CloudFormation’s rollback mechanism (if one service deployment of your stack fails CloudFormation rolls back the whole stack) may look good and in SysOps side that may be what you actually want. But in the development side that is actually not what you want in most cases — if you have a large CloudFormation stack code and try to deploy it and e.g. after 20 minutes some service fails and CloudFormation rolls back everything this is not that good workflow. Terraform’s workflow — “create all resources you can and stop if some service deployment fails” is a lot more natural for a developer.


State Management
Both tools need to keep track of all the resources under management. CloudFormation is managing its state with so called stacks. By default, Terraform is storing its state on disk. Terraform is offering remote state as well, for example, based on S3 and DynamoDB. It is advisable to use remote state when multiple users are working on the same infrastructure in parallel.
Verify Changes:
CloudFormation offers change sets that you can use to verify changes. Terraform provides a command named plan which gives you a very detailed overview of what will be modified if you apply your blueprint.
Being able to use wait conditions is a plus for CloudFormation. Terraform does not support wait conditions.
When CloudFormation fails to modify your infrastructure, it rolls back to the previous working state automatically. Terraform does not support rollbacks out of the box. Either you decide to fix the problem and deploy again, or you have to apply the previous configuration yourself.

aws cloudformation create-stack --stack-name stackname \
  --template-body file:///path/to/your/cf.json \

aws cloudformation delete-stack --stack-name stackname
provider "aws" {
  access_key = "your_access_key"
  secret_key = "your_secret_key"
  region     = "us-west-2"
}
 
resource "aws_instance" "example" {
  ami           = "ami-d07d8db0"
  instance_type = "t2.micro"
}

provider "aws" {
 region = "ap-south-1"
}
resource "aws_instance"
"example" {
 ami = "ami-4fc58420"
 instance_type = "t2.micro"
 tags {
  Name = "terraform-example"
 }
}

Terraform:
Terraform is an Infrastructure as a Code tool that allows you to create and improve infrastructure.
Terraform is used for building, changing, and versioning infrastructure with safely and efficiently.
Big organizations who use AWS or any other cloud service provider do need to use some IaaC tool to spin up EC2 instances for their applications. It would be tedious to spin up EC2 instances manually.
Provider initialization is one of the actions of terraform init. Running this command will download and initialize any providers that are not already initialized.
Use terraform init, a command to initialize download provider plugins to your local system
Providers downloaded by terraform init are only installed for the current working directory; 
After initializing, type the terraform plan command to see what are you going to deploy.
The plan command tells you what TF is about to do; a few will be filled in and some will be computed.
Notice the signs when you ran terraform plan the first time and now.
•	+ says that a new configuration will be added.
•	~ says that the configuration needs a change.
•	- says that the configuration will be deleted.

Use the terraform apply command to apply the changes.

provider "aws" {
 region = "ap-south-1"
}
variable "name" {
 description = "My EC2 instance"
 value = "abc"
}
resource "aws_instance"
"example" {
 ami = "ami-4fc58420"
 instance_type = "t2.micro"
 tags {
  Name = "${var.name}"
 }
}

Terraform records the state of everything it has done, so it stores the state locally as .tfstate files.
terraform.tfstate
terraform.tfstate.backup
Usually, it's not advised to store the state in local hard, as it may contain sensitive data, so it would be good to use a backend like S3 or Consul to store Terraform state information.
A module is just a folder within Terraform files
There is a count parameter which helps us to create loops in TF.

We use three main files while using TF:
•	main.tf -> This is used to declare resources needed for your configuration.
•	vars.tf -> This will hold variables to be used in main.tf.
•	outputs.tf -> This file will hold any output variables.


provider "aws" {
 region = "ap-south-1"
}

variable "key_name" {}

resource "aws_instance" "TFExampleInstance" {
  ami = "ami-0f4cfd64"
  instance_type = "t1.micro"
  key_name = "${var.key_name}"
  security_groups = [ "${aws_security_group.TFSSHAccess.name}" ]
}

resource "aws_security_group" "TFSSHAccess" {
  name = "TFSSHAccess"
  description = "SSH access"

  ingress {
    protocol = "tcp"
    from_port = 22
    to_port = 22
    cidr_blocks = ["0.0.0.0/0"]
  }
}
Multi Provider Example:
provider "aws" {
  region = "eu-central-1"
}

provider "leanix" {
  url       = "${var.leanix_base_url}"
  api_token = "${var.leanix_api_token}"
}

Explain these Elastic Beanstalk deployment modes:

All at once: This is the fastest mode. In this case, Elastic Beanstalk will simply stop all the running instances and then will deploy the new version to these instances.
Immutable: In this mode, Elastic Beanstalk will create a new Auto Scaling Group and deploy the new instances there. Then, if the deployment succeeds, it will replace the old Auto Scaling Group with the newly created one.
Rolling: During the deployment, Elastic Beanstalk will deploy the new application version to some of the currently running instances, and repeat that process until all instances are running the same version. Using this mode, the application will run below capacity, but with zero downtime and no additional costs.
Rolling with additional batches: In this mode, Elastic Beanstalk will make sure there is no capacity reduction. It does so by first starting new instances with the new version of the application, and only then deploying the new version to the old instances.

The AWS S3 service provides read-after-write consistency for PUTs of new objects, meaning that as soon as an object is written to an S3 bucket, it can be retrieved.
However, suppose we tried retrieving an object and received a “Not Found” response. Because it’s not found, we immediately add it. For a small period of time, we’ll be unable to retrieve it because the Not Found response will be cached. Therefore, in this case, S3 is only eventually consistent. Deleting or updating existing objects are also eventually consistent operations.

AWS CloudFormation
•	AWS CloudFormation is a service that helps you model and set up your Amazon Web Services resources so that you can spend less time managing those resources and more time focusing on your applications that run in AWS. You create a template that describes all the AWS resources that you want (like Amazon EC2 instances or Amazon RDS DB instances), and AWS CloudFormation takes care of provisioning and configuring those resources for you.
•	AWS CloudFormation is a configuration orchestration tool that allows you to codify your infrastructure to automate your deployments. CloudFormation templates can be created with YAML in addition to JSON
Which service in AWS allows you to create and delete stacks of AWS?
A: When you use AWS CloudFormation, you manage related resources as a single unit called a stack. You create, update, and delete a collection of resources by creating, updating, and deleting stacks. All the resources in a stack are defined by the stack's AWS CloudFormation template.
The advantages of AWS CloudFormation are as follows- 
•	Simplifies Infrastructure Management
•	Easy to Use
•	Flexible and Declarative
•	Customisation through Parameters
•	Drag-and-Drop UI to Visualise and Edit
•	Ready for Integration
How is AWS CloudFormation different from AWS Elastic Beanstalk?
•	These services are designed to complement each other. AWS Elastic Beanstalk provides an environment to easily deploy and run applications in the cloud. It is integrated with developer tools and provides a one-stop experience for you to manage the lifecycle of your applications. AWS CloudFormation is a convenient provisioning mechanism for a broad range of AWS resources. It supports the infrastructure needs of many different types of applications such as existing enterprise applications, legacy applications, applications built using a variety of AWS resources and container-based solutions 
What are the elements of an AWS CloudFormation template?
•	AWS CloudFormation templates are JSON or YAML-formatted text files that are comprised of five types of elements:
•	1. An optional list of template parameters (input values supplied at stack creation time)
•	2. An optional list of output values (e.g. the complete URL to a web application)
•	3. An optional list of data tables used to lookup static configuration values (e.g., AMI names)
•	4. The list of AWS resources and their configuration values
•	5. A template file format version number


Can I update my stack after it has been created?
Yes. You can use AWS CloudFormation to modify and update the resources in your existing stacks in a controlled and predictable way. By using templates to manage your stack changes, you have the ability to apply version control to your AWS infrastructure just as you do with the software running on it.

Can I save my data when a stack is deleted?
Yes. AWS CloudFormation allows you to define deletion policies for resources in the template. You can specify that snapshots be created for Amazon EBS volumes or Amazon RDS database instances before they are deleted. You can also specify that a resource should be preserved and not deleted when the stack is deleted. This is useful for preserving Amazon S3 buckets when the stack is deleted.

Can stack creation wait for my application to start up?
Yes. AWS CloudFormation provides a WaitCondition resource that acts as a barrier, blocking the creation of other resources until a completion signal is received from an external source such as your application, or management system.

What happens when one of the resources in a stack cannot be created successfully?
By default, the “automatic rollback on error” feature is enabled. This will cause all AWS resources that AWS CloudFormation created successfully for a stack up to the point where an error occurred to be deleted. This is useful when, for example, you accidentally exceed your default limit of Elastic IP addresses, or you don’t have access to an EC2 AMI you’re trying to run. This feature enables you to rely on the fact that stacks are either fully created, or not at all, which simplifies system administration and layered solutions built on top of AWS CloudFormation.

Change Sets
If you need to make changes to the running resources in a stack, you update the stack. Before making changes to your resources, you can generate a change set, which is a summary of your proposed changes. Change sets allow you to see how your changes might impact your running resources, especially for critical resources, before implementing them. 
For example, if you change the name of an Amazon RDS database instance, AWS CloudFormation will create a new database and delete the old one. You will lose the data in the old database unless you've already backed it up. If you generate a change set, you will see that your change will cause your database to be replaced, and you will be able to plan accordingly before you update your stack.



Template in Amazon CloudFormation

---
AWSTemplateFormatVersion: "version date"

Description:
  String

Metadata:
  template metadata

Parameters:
  set of parameters

Mappings:
  set of mappings

Conditions:
  set of conditions

Transform:
  set of transforms

Resources:
  set of resources

Outputs:
  set of outputs

Template Sections
Templates include several major sections. The Resources section is the only required section. Some sections in a template can be in any order. However, as you build your template, it can be helpful to use the logical order shown in the following list because values in one section might refer to values from a previous section. 
Format Version (optional)
The AWS CloudFormation template version that the template conforms to. The template format version is not the same as the API or WSDL version. The template format version can change independently of the API and WSDL versions. 
Description (optional)
A text string that describes the template. This section must always follow the template format version section. 
Metadata (optional)
Objects that provide additional information about the template.
Parameters (optional)
Values to pass to your template at runtime (when you create or update a stack). You can refer to parameters from the Resources and Outputs sections of the template. 
Mappings (optional)
A mapping of keys and associated values that you can use to specify conditional parameter values, similar to a lookup table. You can match a key to a corresponding value by using the Fn::FindInMap intrinsic function in the Resources and Outputs sections. 
Conditions (optional)
Conditions that control whether certain resources are created or whether certain resource properties are assigned a value during stack creation or update. For example, you could conditionally create a resource that depends on whether the stack is for a production or test environment. 
Transform (optional)
For serverless applications (also referred to as Lambda-based applications), specifies the version of the AWS Serverless Application Model (AWS SAM) to use. When you specify a transform, you can use AWS SAM syntax to declare resources in your template. The model defines the syntax that you can use and how it is processed. 
You can also use AWS::Include transforms to work with template snippets that are stored separately from the main AWS CloudFormation template. You can store your snippet files in an Amazon S3 bucket and then reuse the functions across multiple templates. 
Resources (required)
Specifies the stack resources and their properties, such as an Amazon Elastic Compute Cloud instance or an Amazon Simple Storage Service bucket. You can refer to resources in the Resources and Outputs sections of the template. 
Outputs (optional)
Describes the values that are returned whenever you view your stack's properties. For example, you can declare an output for an S3 bucket name and then call the aws cloudformation describe-stacks AWS CLI command to view the name

AWSTemplateFormatVersion: "2010-09-09"
Description: A sample template
Resources:
  MyEC2Instance: #An inline comment
    Type: "AWS::EC2::Instance"
    Properties: 
      ImageId: "ami-0ff8a91507f77f867" #Another comment -- This is a Linux AMI
      InstanceType: t2.micro
      KeyName: testkey
      BlockDeviceMappings:
        -
          DeviceName: /dev/sdm
          Ebs:
            VolumeType: io1
            Iops: 200
            DeleteOnTermination: false
            VolumeSize: 20




